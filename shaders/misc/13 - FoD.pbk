<languageVersion: 1.0;>

kernel HorizontalGaussianBlur
<   namespace : "com.adobe.example";
    vendor : "Adobe Systems Inc.";
    version : 1;
    description : "The horizontal convolution of a Gaussian blur"; >
{
    input image4 src;
    input image4 mask;
    output float4 result;
    
    parameter float depth
    <
        minValue     :  0.0;
        maxValue     : +1.0;
        defaultValue :  0.0;
    >;

    parameter float range
    <
        minValue     :  0.0;
        maxValue     : +1.0;
        defaultValue :  0.1;
    >;
    
    const float PI = 3.14159265358979323846;

    // http://en.wikipedia.org/wiki/Gaussian_blur
    // 1 PASS and calculating all the time.
    // It could be make in two passes or precalculating in a matrix the values or so.
    pixel4 gaussian(image4 img, float2 coord, float _mm) {
        float mm = 0.42 + clamp(_mm, 0.0, 1.0) * (2.2 - 0.42);
        float mm2 = 2.0 * mm * mm;
        float pi_mm = (1.0 / (PI * mm2));
        float4 ret = float4(0, 0, 0, 0);
        float normalize = 0.0;
        for (int y = 0; y <= 3; y++) {
            for (int x = 0; x <= 3; x++) {
                float g = pi_mm * exp(-(float(x*x + y*y) / mm2));
                normalize += g * (1.0 + float(x != 0 || y != 0) + float(x != 0) + float(y != 0));
            }
        }
        for (int y = 0; y <= 3; y++) {
            for (int x = 0; x <= 3; x++) {
                float g = pi_mm * exp(-(float(x*x + y*y) / mm2)) / normalize;
                if (x == 0 && y == 0) {
                    ret += sampleNearest(img, coord) * g;
                } else {
                    ret += sampleNearest(img, coord + float2(+x, +y)) * g;
                    ret += sampleNearest(img, coord + float2(-x, -y)) * g;
                    if (x != 0) ret += sampleNearest(img, coord + float2(-x, +y)) * g;
                    if (y != 0) ret += sampleNearest(img, coord + float2(+x, -y)) * g;
                }
                //float2(x, y);
            }
        }
        return pixel4(ret);
    }
    
    float function(float x, float pos, float range) {
        float v;
        if (abs(pos - x) <= range) {
            v = 1.0 - (sin((x-pos)*(PI/2.0)/range+PI/2.0) + pos);
        } else {
            v = 1.0;
        }
        return v;
    }
    
    // http://silentmatt.com/math/graph.php
    // plot (abs(x) < 1/1) ? sin(x*(PI/2)/(1/1)+PI/2) : 0
    void evaluatePixel()
    {
        //depth
        result = gaussian(
            src,
            outCoord(),
            function(
                sampleNearest(mask, outCoord()).r,
                depth,
                range
            )
        );
    }
}